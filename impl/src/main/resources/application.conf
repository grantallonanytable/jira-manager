play {
  akka.actor-system = "jira-manager"
  modules.enabled += ru.shadewallcorp.jiraTasks.jiraManager.Module

  # Hack for logging. The module of the service registers own implementations.
  modules.disabled += play.api.libs.ws.ahc.AhcWSModule

  http.filters = ru.shadewallcorp.jiraTasks.jiraManager.Filters
  # Должен устранить ReadSocketTimeout у вызывающей стороны если Jira долго отвечает
  server.http.idleTimeout = 30m
  server.akka.requestTimeout = 30m
}

# Настройки circuit-breaker. Если ошибка таймаута - можно увеличить значения call-timeout
lagom.circuit-breaker {
  # Настройки неименованных прерывателей (для всех API того микросервиса по умолчанию)
  default {
    # Прерыватель включён
    enabled = on
    # Количество ошибок API, прежде чем сработает предохранитель
    max-failures = 10
    # Duration of time after which to consider a call a failure.
    call-timeout = 30m
  }
}

# Logging outgoing HTTP requests
configured-ahc-ws-client.request-logging-enabled = false

# To avoid implicit changes of the state store mode in future Lagom versions
akka.cluster.sharding.state-store-mode = persistence

lagom.serialization.json {
  jackson-modules += ru.shadewallcorp.jiraTasks.jiraManager.JacksonCustomSetupModule
}

akka {
  discovery {
    method = aggregate
    aggregate {
      discovery-methods = ["config", "akka-dns"]
    }
    config {
      }
    }
}

# Split Brain Resolver
akka.cluster.downing-provider-class = "tanukki.akka.cluster.autodown.MajorityLeaderAutoDowning"

custom-downing {
  stable-after = 7s

  majority-leader-auto-downing {
    majority-member-role = ""
    down-if-in-minority = true
    shutdown-actor-system-on-resolution = true
  }
}

# The service-name needs to match the app label applied to your pods in the deployment spec.
akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      discovery-method = kubernetes-api
      service-name = "jira-manager"
      required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
    }
  }
}

taymyr.lagom.metrics {
  prefix = "jira-manager"
  enableJVM = true
  enableHikari = false
  enableCassandra = false
}

# Enable the serializer provided in Akka 2.5.8+ for akka.Done and other internal
# messages to avoid the use of Java serialization.
akka.actor.serialization-bindings {
  "akka.Done"                 = akka-misc
  "akka.actor.Address"        = akka-misc
  "akka.remote.UniqueAddress" = akka-misc
}
akka.actor.allow-java-serialization = off

# Доступ к JIRA
jira {
  userName = "LOGIN"
  password = "PASSWORD"
  maxResultCount = 10000
  leaseTimeout = 600000
  socketTimeout = 15m
  connectionTimeout = 5s
  requestTimeout = 15m
}

jira.jira-task-field-aliases {
    key = ["Код"]
    name = ["Тема"]
    status = ["Статус"]
    priority = ["Приоритет"]
    srnumber = ["Номер SR"]
    startDate = ["Дата создания"]
    closeDate = ["Фактический срок исполнения"]
    comment = ["Комментарий"]
}

# Переопределение настроек календаря (также они в файлах ресурсов)
calendar {
  notWorkDaysList = [
"01-01-2018",
"02-01-2018",
"03-01-2018",
"04-01-2018",
"05-01-2018",
"06-01-2018",
"07-01-2018",
"08-01-2018",
"23-02-2018",
"08-03-2018",
"09-03-2018",
"30-04-2018",
"01-05-2018",
"02-05-2018",
"09-05-2018",
"11-06-2018",
"12-06-2018",
"04-11-2018",
"05-11-2018",
"31-12-2018",
"01-01-2019",
"02-01-2019",
"03-01-2019",
"04-01-2019",
"05-01-2019",
"06-01-2019",
"07-01-2019",
"08-01-2019",
"08-03-2019",
"01-05-2019",
"02-05-2019",
"03-05-2019",
"09-05-2019",
"10-05-2019",
"12-06-2019",
"04-11-2019",
"01-01-2020",
"02-01-2020",
"03-01-2020",
"06-01-2020",
"07-01-2020",
"08-01-2020",
"24-02-2020",
"09-03-2020",
"01-05-2020",
"04-05-2020",
"05-05-2020",
"11-05-2020",
"12-06-2020",
"04-11-2020"
  ]
  workHolidaysList = [
"28-04-2018",
"09-06-2018",
"29-12-2018"
  ]
}
